using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/// <summary>
/// 所謂「多重繼承」是指某一類別同時自多個父類別(基本類別)衍生出來，也就是說子類別只能繼承自
/// 某一特定父類別而無法同時繼承多個父類別。
/// 由於 C# 提供的繼承機制只能單一繼承某個父類別，未提供多重繼承
/// ，其解決方案就是透過「介面」(Interface)，因為介面可多重繼承其他介面。
/// 
/// 定義介面時只能對方法做宣告，再透過類別來實作(Implement)即該方法的程式碼在該類別內撰寫
/// ，所以介面要經類別實作才有用。
/// 
/// C# 編寫多重繼承的方式是使用 interface 關鍵字來達到多重介面，利用 interface 可讓您
/// 定義出一組相關的屬性和方法，而任何類別都可在不管類別的階層架構下實作這些介面。
/// 
/// 介面的定義
/// 「介面」像類別一樣可定義屬性、方法、事件和索引子等成員，方員可以 0 個或多個
/// ，但成員不允許為常數、欄位、建構函式、解構函式、型別、靜態成員。
/// 但介面不提供實作，介面必須經由類別來實作。
/// 介面特點如下：
/// 1.介面不可被實體化，不可以使用 new 來建立介面物件。
/// 2.若類別實作介面，則該類別必須要實作介面的所有成員。
/// 3.類別能實作一個以上的介面，介面亦可繼承一個以上的介面。
/// 4.定義介面時不允許使用 public , private ,static 存取修飾詞。
/// 5.一個類別只能繼承一個父類別，但一個類別可實作(繼承)多個介面。
/// </summary>
namespace slnInterface
{

    /// <summary>
    /// 介面實作(Implementation) 的目的是在執行介面所定義的屬性或方法，
    /// 而介面實作(指編寫相關程式碼)的場所在類別內撰寫。
    /// 類別除了可定義自身的屬性與方法，也可實作介面。
    /// 類別要用「:」符號來指定要實作的介面名稱，如此才能在類別內部
    /// ，建立在定義時所宣告的屬性與方法的程式碼。
    /// </summary>
    interface IConvert
    {
        double Mult { get; set; }   //倍率屬性
        void Convert(double l);
    }
}
